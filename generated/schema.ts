// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class AiBoxCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AiBoxCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AiBoxCount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AiBoxCount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AiBoxCount | null {
    return changetype<AiBoxCount | null>(store.get_in_block("AiBoxCount", id));
  }

  static load(id: string): AiBoxCount | null {
    return changetype<AiBoxCount | null>(store.get("AiBoxCount", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get withdrawnAmount(): BigInt {
    let value = this.get("withdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawnAmount(value: BigInt) {
    this.set("withdrawnAmount", Value.fromBigInt(value));
  }

  get rewardPaidAmount(): BigInt {
    let value = this.get("rewardPaidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardPaidAmount(value: BigInt) {
    this.set("rewardPaidAmount", Value.fromBigInt(value));
  }

  get addressTotal(): BigInt {
    let value = this.get("addressTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set addressTotal(value: BigInt) {
    this.set("addressTotal", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }

  get updateAt(): BigInt {
    let value = this.get("updateAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateAt(value: BigInt) {
    this.set("updateAt", Value.fromBigInt(value));
  }

  get addressList(): Array<Bytes> {
    let value = this.get("addressList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set addressList(value: Array<Bytes>) {
    this.set("addressList", Value.fromBytesArray(value));
  }

  get stakeAmountTotal(): BigInt {
    let value = this.get("stakeAmountTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmountTotal(value: BigInt) {
    this.set("stakeAmountTotal", Value.fromBigInt(value));
  }

  get actualBalance(): BigInt {
    let value = this.get("actualBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set actualBalance(value: BigInt) {
    this.set("actualBalance", Value.fromBigInt(value));
  }

  get profitTotalAmount(): BigInt {
    let value = this.get("profitTotalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set profitTotalAmount(value: BigInt) {
    this.set("profitTotalAmount", Value.fromBigInt(value));
  }

  get efficientAddressTotal(): BigInt {
    let value = this.get("efficientAddressTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set efficientAddressTotal(value: BigInt) {
    this.set("efficientAddressTotal", Value.fromBigInt(value));
  }

  get efficientAddressList(): Array<Bytes> {
    let value = this.get("efficientAddressList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set efficientAddressList(value: Array<Bytes>) {
    this.set("efficientAddressList", Value.fromBytesArray(value));
  }

  get managerWithdrawnAmount(): BigInt {
    let value = this.get("managerWithdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set managerWithdrawnAmount(value: BigInt) {
    this.set("managerWithdrawnAmount", Value.fromBigInt(value));
  }
}

export class AddressCheck extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddressCheck entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddressCheck must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AddressCheck", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AddressCheck | null {
    return changetype<AddressCheck | null>(
      store.get_in_block("AddressCheck", id),
    );
  }

  static load(id: string): AddressCheck | null {
    return changetype<AddressCheck | null>(store.get("AddressCheck", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get upperId(): string {
    let value = this.get("upperId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set upperId(value: string) {
    this.set("upperId", Value.fromString(value));
  }

  get teamStakeAmount(): BigInt {
    let value = this.get("teamStakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teamStakeAmount(value: BigInt) {
    this.set("teamStakeAmount", Value.fromBigInt(value));
  }

  get teamStakeAmountTotal(): BigInt {
    let value = this.get("teamStakeAmountTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teamStakeAmountTotal(value: BigInt) {
    this.set("teamStakeAmountTotal", Value.fromBigInt(value));
  }

  get teamWithdrawnAmount(): BigInt {
    let value = this.get("teamWithdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teamWithdrawnAmount(value: BigInt) {
    this.set("teamWithdrawnAmount", Value.fromBigInt(value));
  }

  get teamRewardPaidAmount(): BigInt {
    let value = this.get("teamRewardPaidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teamRewardPaidAmount(value: BigInt) {
    this.set("teamRewardPaidAmount", Value.fromBigInt(value));
  }

  get teamAddressTotal(): BigInt {
    let value = this.get("teamAddressTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teamAddressTotal(value: BigInt) {
    this.set("teamAddressTotal", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }

  get updateAt(): BigInt {
    let value = this.get("updateAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateAt(value: BigInt) {
    this.set("updateAt", Value.fromBigInt(value));
  }

  get teamAddressList(): Array<Bytes> {
    let value = this.get("teamAddressList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set teamAddressList(value: Array<Bytes>) {
    this.set("teamAddressList", Value.fromBytesArray(value));
  }

  get referrer(): Bytes {
    let value = this.get("referrer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set referrer(value: Bytes) {
    this.set("referrer", Value.fromBytes(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get stakeAmountTotal(): BigInt {
    let value = this.get("stakeAmountTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmountTotal(value: BigInt) {
    this.set("stakeAmountTotal", Value.fromBigInt(value));
  }

  get withdrawnAmount(): BigInt {
    let value = this.get("withdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawnAmount(value: BigInt) {
    this.set("withdrawnAmount", Value.fromBigInt(value));
  }

  get rewardPaidAmount(): BigInt {
    let value = this.get("rewardPaidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardPaidAmount(value: BigInt) {
    this.set("rewardPaidAmount", Value.fromBigInt(value));
  }

  get upperAddressInfo(): AddressCheckLoader {
    return new AddressCheckLoader(
      "AddressCheck",
      this.get("id")!.toString(),
      "upperAddressInfo",
    );
  }

  get activated(): boolean {
    let value = this.get("activated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set activated(value: boolean) {
    this.set("activated", Value.fromBoolean(value));
  }
}

export class DayCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DayCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DayCount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("DayCount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DayCount | null {
    return changetype<DayCount | null>(store.get_in_block("DayCount", id));
  }

  static load(id: string): DayCount | null {
    return changetype<DayCount | null>(store.get("DayCount", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stakeAmount(): BigInt {
    let value = this.get("stakeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakeAmount(value: BigInt) {
    this.set("stakeAmount", Value.fromBigInt(value));
  }

  get profitTotalAmount(): BigInt {
    let value = this.get("profitTotalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set profitTotalAmount(value: BigInt) {
    this.set("profitTotalAmount", Value.fromBigInt(value));
  }

  get withdrawnAmount(): BigInt {
    let value = this.get("withdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawnAmount(value: BigInt) {
    this.set("withdrawnAmount", Value.fromBigInt(value));
  }

  get managerWithdrawnAmount(): BigInt {
    let value = this.get("managerWithdrawnAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set managerWithdrawnAmount(value: BigInt) {
    this.set("managerWithdrawnAmount", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }
}

export class AddressCheckLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AddressCheck[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AddressCheck[]>(value);
  }
}
